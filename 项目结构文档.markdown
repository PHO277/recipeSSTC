# 智能食谱生成器项目结构文档

## 项目概述

本项目包含两个版本：

- **Streamlit版本**：原始开发版本，功能完整，适合快速开发和测试
- **Flask版本**：新增生产版本，专为团队部署和桌面应用优化

## 目录结构

### Streamlit版本 (原始版本)
```
recipe_generator/
├── app.py                    # 主应用入口，协调页面渲染
├── config/
│   └── page_config.py       # 页面配置和CSS样式
├── components/
│   ├── auth.py             # 用户认证（登录/注册）功能
│   ├── sidebar.py          # 侧边栏（语言选择、用户信息、快速操作）
│   ├── home.py             # 未登录用户的主页
│   ├── generate_recipe.py  # 食谱生成页面
│   ├── my_recipes.py       # 用户食谱管理页面
│   ├── discover.py         # 发现食谱页面（占位）
│   ├── statistics.py       # 用户食谱统计页面
│   ├── settings.py         # 用户设置页面
│   ├── footer.py           # 页脚组件
│   ├── image_input_modal.py # 图像输入模态窗口组件
│   └── recipe_display.py    # 食谱展示与交互组件
├── utils/
│   └── session.py          # 会话状态初始化和项目路径配置
├── mongodb_manager.py       # MongoDB数据库管理，处理用户和食谱数据
├── nutrition_analyzer.py    # 解析和格式化营养信息
└── llm_interface.py        # 调用语言模型生成食谱和营养信息
```
### Flask版本 (新增生产版本)
```
flask_version/
├── integrated_app.py        # Flask完全集成版本 - 包含所有原有功能
├── flask_app.py            # Flask基础版本 - 简化功能演示
├── copy_modules.py         # 自动复制原有模块的工具脚本
├── quick_start.py          # 一键启动脚本，自动配置和启动应用
├── run.py                  # 带横幅信息的启动脚本
├── requirements.txt        # Flask版本专用Python依赖
├── .env.example           # 环境变量配置示例文件
├── README.md              # Flask版本使用说明文档
├── templates/
│   └── index.html         # 前端HTML模板，包含完整界面布局
├── static/
│   ├── style.css          # CSS样式文件，现代化响应式设计
│   └── app.js             # JavaScript功能文件，前端交互逻辑
├── components/            # 复制自原版本(运行copy_modules.py后生成)
├── config/                # 复制自原版本(运行copy_modules.py后生成)
├── utils/                 # 复制自原版本(运行copy_modules.py后生成)
├── mongodb_manager.py     # 复制自原版本(运行copy_modules.py后生成)
├── llm_interface.py       # 复制自原版本(运行copy_modules.py后生成)
└── nutrition_analyzer.py  # 复制自原版本(运行copy_modules.py后生成)
```
## 文件功能描述

### Streamlit版本 (原有文件)

#### 1. app.py
**功能描述**：
- 项目的主入口，负责协调整个应用的渲染流程。
- 根据用户登录状态渲染主页或带标签页的已登录界面。
- 调用其他模块的渲染函数，组织页面结构。

#### 2. config/page_config.py
**功能描述**：
- 配置Streamlit页面的基本设置（如标题、图标、布局）。
- 定义并加载全局CSS样式和JavaScript代码，用于美化界面和添加交互效果。

#### 3. utils/session.py
**功能描述**：
- 初始化Streamlit会话状态，包括MongoDB连接、用户登录状态、用户名、用户数据和语言设置。
- 配置项目路径以支持模块导入。

#### 4. components/auth.py
**功能描述**：
- 实现用户认证功能，包括登录和注册界面及逻辑。
- 处理用户登录、注册、演示账号登录，并更新会话状态。

#### 5. components/sidebar.py
**功能描述**：
- 渲染侧边栏，包括语言选择、用户信息展示、用户统计和快速操作按钮。
- 根据登录状态显示认证界面或用户信息。

#### 6. components/home.py
**功能描述**：
- 为未登录用户渲染主页，展示应用标题、副标题、功能介绍卡片和登录提示。
- 提供静态内容，鼓励用户登录以使用完整功能。

#### 7. components/generate_recipe.py
**功能描述**：
- 实现食谱生成页面，允许用户输入食材、饮食偏好、健康目标等参数，生成食谱并显示营养信息。
- 支持"手气不错"随机食材功能、食谱保存、下载和分享（占位）。

#### 8. components/my_recipes.py
**功能描述**：
- 显示用户保存的食谱，支持搜索、排序和筛选。
- 提供食谱的查看、删除和分享（占位）功能。

#### 9. components/discover.py
**功能描述**：
- 占位模块，用于展示社区食谱或推荐食谱（功能待实现）。
- 当前仅显示"即将推出"提示。

#### 10. components/statistics.py
**功能描述**：
- 显示用户的食谱统计信息，包括总食谱数、平均评分、最常用饮食类型和本月食谱数。
- 展示最近食谱和热门标签，提供简单的趋势分析。

#### 11. components/footer.py
**功能描述**：
- 渲染页面底部的页脚，包含版权信息、隐私政策、条款服务和联系链接。
- 可复用于所有页面。

#### 12. mongodb_manager.py
**功能描述**：
- 管理MongoDB数据库，处理用户注册、登录、语言设置以及食谱的创建、查询、删除和统计。
- 提供密码加密功能，确保用户数据安全。

**主要接口功能**：
- `MongoDBManager.__init__(connection_string)`: 初始化MongoDB连接，设置用户和食谱集合。
- `create_user(username, password, language, email)`: 创建新用户，加密密码并存储用户信息。
- `verify_user(username, password)`: 验证用户登录，更新最后登录时间。
- `get_user(username)`: 获取指定用户信息。
- `update_user_language(username, language)`: 更新用户语言偏好。
- `save_recipe(username, recipe_data)`: 保存用户生成的食谱。
- `get_user_recipes(username, limit, skip)`: 获取用户食谱列表，支持分页。
- `delete_recipe(recipe_id)`: 删除指定食谱。
- `search_recipes(username, query)`: 搜索用户食谱，支持关键词匹配。
- `get_recipe_statistics(username)`: 获取用户食谱统计数据，如总数、平均评分等。

#### 13. nutrition_analyzer.py
**功能描述**：
- 解析语言模型生成的营养信息，格式化为用户友好的显示文本。
- 提供备用营养信息，处理解析失败的情况。

**主要接口功能**：
- `NutritionAnalyzer.__init__()`: 初始化营养解析器，定义营养数据正则表达式。
- `parse_nutrition(llm_output)`: 解析JSON格式的营养数据，提取并格式化营养信息。
- `_format_nutrition_display(nutrition_data)`: 将营养数据格式化为显示文本。
- `_generate_fallback_nutrition()`: 生成默认营养信息，当解析失败时使用。

#### 14. llm_interface.py
**功能描述**：
- 调用外部语言模型API（如DeepSeek），生成包含食谱和营养信息的JSON响应。
- 支持根据用户输入的食材、饮食偏好、健康目标等生成定制化食谱。

**主要接口功能**：
- `LLMInterface.__init__(api_key)`: 初始化语言模型客户端，设置API密钥和端点。
- `generate_recipe_and_nutrition(ingredients, diet, goal, language, cuisine, cooking_time, difficulty, servings)`: 生成食谱和营养信息，返回JSON格式数据。

#### 15. components/image_input_modal.py
**功能描述**：
- 提供图像输入模态窗口，允许用户上传食材图片并调用外部API自动识别图片中的食材。
- 支持多图上传、图片缩略图预览、识别结果多选、随机选择、全选、添加到输入框等交互。
- 通过 `SILICONFLOW_API_KEY` 调用 SiliconFlow 图像识别API，自动处理API响应中的JSON解析异常。
- 支持多语言食材名称返回，界面文本可国际化。

**主要接口功能**：
- `ImageInputModal.__init__()`: 初始化API密钥、模型和端点。
- `encode_image_to_base64(uploaded_file)`: 将上传的图片文件转为base64字符串，便于API传输。
- `call_siliconflow_api(images, language)`: 调用API识别图片食材，自动处理异常和JSON解析。
- `render_modal()`: 渲染图像输入模态窗口，包含图片上传、识别、结果选择与添加等完整交互流程。

#### 16. components/recipe_display.py
**功能描述**：
- 封装了所有食谱展示相关的UI逻辑，支持卡片式、完整详情、保存、下载等多种展示方式。
- 提供食谱卡片、完整食谱、营养信息、标签、操作按钮、保存表单、下载按钮等复用组件。
- 统一处理食谱的元数据、内容、营养信息、用户备注、标签、评分等展示与交互。
- 供 `generate_recipe.py` 和 `my_recipes.py` 等页面直接调用，简化主页面逻辑。

**主要接口功能**：
- `RecipeDisplay.__init__()`: 初始化多语言翻译函数。
- `display_recipe_card(recipe_data, show_actions, key_prefix)`: 显示我的食谱页面的卡片式食谱。
- `display_full_recipe(recipe_data, show_save_options)`: 显示生成食谱页面的完整食谱详情。
- `_display_recipe_metadata(recipe_data)`: 展示食谱标签、基础信息。
- `_display_recipe_content(recipe_data)`: 展示食材、备注、步骤、营养信息等内容。
- `_display_recipe_actions(recipe_data, key_prefix)`: 展示删除、分享等操作按钮。
- `_display_nutrition_info(recipe_data)`: 解析并卡片式展示营养信息。
- `_display_recipe_details(recipe_data)`: 展示详细信息如份量、时长、难度。
- `_display_save_options(recipe_data)`: 提供保存、评分、标签、备注、下载等表单与按钮。
- `_display_download_button(recipe_data)`: 生成下载按钮，导出食谱为txt。
- `_format_recipe_for_download(recipe_data)`: 格式化食谱文本用于下载。

### Flask版本 (新增文件)

#### 17. flask_version/integrated_app.py
**功能描述**：
- Flask版本的完全集成应用，包含所有Streamlit版本的功能。
- 自动导入和集成原有的所有模块（mongodb_manager、llm_interface、nutrition_analyzer等）。
- 提供完整的RESTful API接口，支持用户认证、食谱生成、图像识别、数据统计等功能。
- 包含降级处理机制，当某些服务不可用时提供备用功能。

**主要接口功能**：
- `initialize_services()`: 初始化所有服务（数据库、AI、营养分析、图像识别）。
- `/api/login` (POST): 用户登录接口，集成原有数据库验证。
- `/api/generate-recipe` (POST): 食谱生成接口，使用原有LLM和营养分析功能。
- `/api/image-recognition` (POST): 图像识别接口，集成原有SiliconFlow API。
- `/api/my-recipes` (GET): 获取用户食谱列表。
- `/api/statistics` (GET): 获取用户统计数据。

#### 18. flask_version/flask_app.py
**功能描述**：
- Flask版本的基础应用，提供简化的演示功能。
- 用于快速测试和开发，不依赖外部服务。
- 包含基本的用户认证和食谱生成模拟功能。

**主要接口功能**：
- `/api/test` (GET): API测试端点。
- `/api/login` (POST): 简化的登录验证。
- `/api/generate-recipe` (POST): 模拟食谱生成。

#### 19. flask_version/copy_modules.py
**功能描述**：
- 自动化工具脚本，用于复制Streamlit版本的核心模块到Flask目录。
- 检查并复制必要的Python文件和目录。
- 提供复制状态反馈和错误处理。

**主要接口功能**：
- `copy_modules()`: 执行模块复制操作，包括文件和目录的复制。

#### 20. flask_version/quick_start.py
**功能描述**：
- 一键启动脚本，自动完成环境配置、依赖安装、模块复制和应用启动的完整流程。
- 包含Python版本检查、依赖安装、环境变量设置等功能。
- 提供友好的用户界面和详细的状态信息。

**主要接口功能**：
- `check_python_version()`: 检查Python版本兼容性。
- `install_dependencies()`: 自动安装所需依赖包。
- `setup_environment()`: 创建和配置环境变量文件。
- `start_application()`: 启动Flask应用并自动打开浏览器。

#### 21. flask_version/run.py
**功能描述**：
- 带有详细信息显示的启动脚本，包含项目横幅、依赖检查和服务状态显示。
- 提供启动信息、功能列表和开发指南。
- 支持自动打开浏览器和优雅的错误处理。

**主要接口功能**：
- `print_banner()`: 显示应用启动横幅。
- `check_dependencies()`: 检查和显示依赖模块状态。
- `open_browser()`: 延迟自动打开浏览器。

#### 22. flask_version/templates/index.html
**功能描述**：
- Flask应用的主要前端模板，包含完整的用户界面布局。
- 实现响应式设计，支持桌面和移动端显示。
- 包含用户认证界面、导航菜单、主要功能页面（食谱生成、我的食谱、发现、统计、设置）。
- 集成Font Awesome图标和现代化CSS样式。

**主要组件**：
- 侧边栏：用户认证、导航菜单
- 主内容区：功能页面和交互界面
- 页脚：状态信息和版权信息

#### 23. flask_version/static/style.css
**功能描述**：
- 现代化的CSS样式文件，提供完整的视觉设计。
- 实现响应式布局，支持多种屏幕尺寸。
- 包含深色/浅色主题支持、动画效果、交互反馈。
- 定义了完整的颜色系统、字体层级和布局规则。

**主要特性**：
- CSS变量系统便于主题定制
- 响应式网格布局
- 动画和过渡效果
- 现代化的表单和按钮样式

#### 24. flask_version/static/app.js
**功能描述**：
- 前端JavaScript功能文件，处理所有用户交互逻辑。
- 实现单页应用(SPA)风格的标签页切换和内容加载。
- 包含AJAX请求处理、本地存储管理、实时状态更新。
- 提供完整的食谱生成、用户管理、数据统计等前端功能。

**主要接口功能**：
- `login()`: 处理用户登录请求和状态更新。
- `generateRecipe()`: 发送食谱生成请求并处理响应。
- `showTab()`: 实现标签页切换和内容加载。
- `loadMyRecipes()`: 加载和显示用户食谱列表。
- `saveCurrentRecipe()`: 保存食谱到本地存储。

#### 25. flask_version/.env.example
**功能描述**：
- 环境变量配置示例文件，提供所有必要配置项的模板。
- 包含数据库连接、API密钥、Flask配置等设置。
- 便于用户快速配置开发和生产环境。

**配置项**：
- MongoDB连接字符串
- DeepSeek和SiliconFlow API密钥
- Flask应用密钥和环境设置

#### 26. flask_version/README.md
**功能描述**：
- Flask版本的专用说明文档，包含详细的使用指南。
- 提供快速开始、功能介绍、配置说明、部署指南等信息。
- 包含与Streamlit版本的对比说明和技术架构介绍。

---
