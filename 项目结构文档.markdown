# 智能食谱生成器项目结构文档

## 目录结构
```
recipe_generator/
├── app.py                    # 主应用入口，协调页面渲染
├── config/
│   └── page_config.py       # 页面配置和CSS样式
├── components/
│   ├── auth.py             # 用户认证（登录/注册）功能
│   ├── sidebar.py          # 侧边栏（语言选择、用户信息、快速操作）
│   ├── home.py             # 未登录用户的主页
│   ├── generate_recipe.py  # 食谱生成页面
│   ├── my_recipes.py       # 用户食谱管理页面
│   ├── discover.py         # 发现食谱页面（占位）
│   ├── statistics.py       # 用户食谱统计页面
│   ├── settings.py         # 用户设置页面
│   ├── footer.py           # 页脚组件
│   └── image_input_modal.py # 图像输入模态窗口组件
├── utils/
│   └── session.py          # 会话状态初始化和项目路径配置
├── mongodb_manager.py       # MongoDB数据库管理，处理用户和食谱数据
├── nutrition_analyzer.py    # 解析和格式化营养信息
├── llm_interface.py        # 调用语言模型生成食谱和营养信息
```

## 文件功能描述

### 1. app.py
**功能描述**：
- 项目的主入口，负责协调整个应用的渲染流程。
- 根据用户登录状态渲染主页或带标签页的已登录界面。
- 调用其他模块的渲染函数，组织页面结构。

### 2. config/page_config.py
**功能描述**：
- 配置Streamlit页面的基本设置（如标题、图标、布局）。
- 定义并加载全局CSS样式和JavaScript代码，用于美化界面和添加交互效果。

### 3. utils/session.py
**功能描述**：
- 初始化Streamlit会话状态，包括MongoDB连接、用户登录状态、用户名、用户数据和语言设置。
- 配置项目路径以支持模块导入。

### 4. components/auth.py
**功能描述**：
- 实现用户认证功能，包括登录和注册界面及逻辑。
- 处理用户登录、注册、演示账号登录，并更新会话状态。

### 5. components/sidebar.py
**功能描述**：
- 渲染侧边栏，包括语言选择、用户信息展示、用户统计和快速操作按钮。
- 根据登录状态显示认证界面或用户信息。

### 6. components/home.py
**功能描述**：
- 为未登录用户渲染主页，展示应用标题、副标题、功能介绍卡片和登录提示。
- 提供静态内容，鼓励用户登录以使用完整功能。

### 7. components/generate_recipe.py
**功能描述**：
- 实现食谱生成页面，允许用户输入食材、饮食偏好、健康目标等参数，生成食谱并显示营养信息。
- 支持“手气不错”随机食材功能、食谱保存、下载和分享（占位）。

### 8. components/my_recipes.py
**功能描述**：
- 显示用户保存的食谱，支持搜索、排序和筛选。
- 提供食谱的查看、删除和分享（占位）功能。

### 9. components/discover.py
**功能描述**：
- 占位模块，用于展示社区食谱或推荐食谱（功能待实现）。
- 当前仅显示“即将推出”提示。

### 10. components/statistics.py
**功能描述**：
- 显示用户的食谱统计信息，包括总食谱数、平均评分、最常用饮食类型和本月食谱数。
- 展示最近食谱和热门标签，提供简单的趋势分析。

### 11. components/footer.py
**功能描述**：
- 渲染页面底部的页脚，包含版权信息、隐私政策、条款服务和联系链接。
- 可复用于所有页面。

### 12. mongodb_manager.py
**功能描述**：
- 管理MongoDB数据库，处理用户注册、登录、语言设置以及食谱的创建、查询、删除和统计。
- 提供密码加密功能，确保用户数据安全。

**主要接口功能**：
- `MongoDBManager.__init__(connection_string)`: 初始化MongoDB连接，设置用户和食谱集合。
- `create_user(username, password, language, email)`: 创建新用户，加密密码并存储用户信息。
- `verify_user(username, password)`: 验证用户登录，更新最后登录时间。
- `get_user(username)`: 获取指定用户信息。
- `update_user_language(username, language)`: 更新用户语言偏好。
- `save_recipe(username, recipe_data)`: 保存用户生成的食谱。
- `get_user_recipes(username, limit, skip)`: 获取用户食谱列表，支持分页。
- `delete_recipe(recipe_id)`: 删除指定食谱。
- `search_recipes(username, query)`: 搜索用户食谱，支持关键词匹配。
- `get_recipe_statistics(username)`: 获取用户食谱统计数据，如总数、平均评分等。

### 13. nutrition_analyzer.py
**功能描述**：
- 解析语言模型生成的营养信息，格式化为用户友好的显示文本。
- 提供备用营养信息，处理解析失败的情况。

**主要接口功能**：
- `NutritionAnalyzer.__init__()`: 初始化营养解析器，定义营养数据正则表达式。
- `parse_nutrition(llm_output)`: 解析JSON格式的营养数据，提取并格式化营养信息。
- `_format_nutrition_display(nutrition_data)`: 将营养数据格式化为显示文本。
- `_generate_fallback_nutrition()`: 生成默认营养信息，当解析失败时使用。

### 14. llm_interface.py
**功能描述**：
- 调用外部语言模型API（如DeepSeek），生成包含食谱和营养信息的JSON响应。
- 支持根据用户输入的食材、饮食偏好、健康目标等生成定制化食谱。

**主要接口功能**：
- `LLMInterface.__init__(api_key)`: 初始化语言模型客户端，设置API密钥和端点。
- `generate_recipe_and_nutrition(ingredients, diet, goal, language, cuisine, cooking_time, difficulty, servings)`: 生成食谱和营养信息，返回JSON格式数据。

### 15. components/image_input_modal.py
**功能描述**：
- 提供图像输入模态窗口，允许用户上传食材图片并调用外部API自动识别图片中的食材。
- 支持多图上传、图片缩略图预览、识别结果多选、随机选择、全选、添加到输入框等交互。
- 通过 `SILICONFLOW_API_KEY` 调用 SiliconFlow 图像识别API，自动处理API响应中的JSON解析异常。
- 支持多语言食材名称返回，界面文本可国际化。

**主要接口功能**：
- `ImageInputModal.__init__()`: 初始化API密钥、模型和端点。
- `encode_image_to_base64(uploaded_file)`: 将上传的图片文件转为base64字符串，便于API传输。
- `call_siliconflow_api(images, language)`: 调用API识别图片食材，自动处理异常和JSON解析。
- `render_modal()`: 渲染图像输入模态窗口，包含图片上传、识别、结果选择与添加等完整交互流程。